import { makeAutoObservable } from "mobx";

class RecipeStore {
    likedRecipes = new Set();
    likesCount = new Map(); // üëà –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ –ª–∞–π–∫–æ–≤
    initialized = false;

    constructor() {
        makeAutoObservable(this);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const saved = localStorage.getItem('likedRecipes');
        const savedCounts = localStorage.getItem('likesCount');
        
        if (saved) {
            try {
                this.likedRecipes = new Set(JSON.parse(saved));
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–π–∫–æ–≤ –∏–∑ localStorage:', e);
                this.likedRecipes = new Set();
            }
        }
        
        if (savedCounts) {
            try {
                this.likesCount = new Map(JSON.parse(savedCounts));
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á—ë—Ç—á–∏–∫–æ–≤ –∏–∑ localStorage:', e);
                this.likesCount = new Map();
            }
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∞–π–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
    initializeLikes(recipes) {
        if (!this.initialized) {
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            this.likedRecipes.clear();
            this.likesCount.clear();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞
            recipes.forEach(recipe => {
                if (recipe.liked) {
                    this.likedRecipes.add(recipe.id);
                }
                this.likesCount.set(recipe.id, recipe.likesCount || 0);
            });
            
            this.saveToLocalStorage();
            this.initialized = true;
        }
    }

    addLike(recipeId) {
        this.likedRecipes.add(recipeId);
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        const currentCount = this.likesCount.get(recipeId) || 0;
        this.likesCount.set(recipeId, currentCount + 1);
        this.saveToLocalStorage();
    }

    removeLike(recipeId) {
        this.likedRecipes.delete(recipeId);
        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        const currentCount = this.likesCount.get(recipeId) || 0;
        this.likesCount.set(recipeId, Math.max(0, currentCount - 1));
        this.saveToLocalStorage();
    }

    isLiked(recipeId) {
        return this.likedRecipes.has(recipeId);
    }

    getLikesCount(recipeId) {
        return this.likesCount.get(recipeId) || 0;
    }

    saveToLocalStorage() {
        localStorage.setItem('likedRecipes', JSON.stringify([...this.likedRecipes]));
        localStorage.setItem('likesCount', JSON.stringify([...this.likesCount]));
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clear() {
        this.likedRecipes.clear();
        this.likesCount.clear();
        this.initialized = false;
        localStorage.removeItem('likedRecipes');
        localStorage.removeItem('likesCount');
    }
}

export default new RecipeStore();